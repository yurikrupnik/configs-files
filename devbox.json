{
  "$schema": "https://raw.githubusercontent.com/jetpack-io/devbox/0.10.1/.schema/devbox.schema.json",
  "packages": [
    "teller",
    "gum",
    "stow",
    "kubescape",
    "just",
    "popeye",
    "kube-linter",
    "awscli",
    "cue",
    "gh",
    "go-task",
    "starship",
    "tilt",
    "bat",
    "bun",
    "kubectl",
    "kind",
    "minikube",
    "lazygit",
    "google-cloud-sdk",
    "zed",
    "timoni",
    "helm",
    "cue",
    "kcl",
    "minikube",
    "node",
    "pulumi",
    "kubectx",
    "k9s"
  ],
  "shellenv": {
    "init_hook": [
      "echo 'Welcome to shellenv devbox!' > /dev/null",
      "bat /dev/null"
    ],
    "env": {
      "PATH":           "$HOME/.local/bin:$PATH",
      "GOPATH":         "$HOME/go",
      "GOBIN":          "$HOME/go/bin",
      "KUBECONFIG":     "$HOME/.kube/config",
      "KUBE_EDITOR":    "zed",
      "EDITOR":         "zed",
      "VISUAL":         "zed",
      "PAGER":          "less",
      "LESS":           "-R",
      "GCLOUD_PROJECT": "shared-404221",
      "GCLOUD_REGION":  "EU"
    }
  },
  "shell": {
    "init_hook": ["echo 'Welcome to devbox!' > /dev/null"],
    "scripts": {
      "test": ["echo \"Error: no test specified\" && exit 1"],
      "install-hook-bash": [
        "echo adding 'devbox global shellenv' to ~/.bashrc",
        "grep -qF 'devbox global shellenv' ~/.bashrc || echo 'eval \"$(devbox global shellenv --init-hook)\"' >> ~/.bashrc",
        "tail -n 1 ~/.bashrc"
      ],
      "install-hook-zsh": [
        "echo adding 'devbox global shellenv' to ~/.zshrc",
        "grep -qF 'devbox global shellenv' ~/.zshrc || echo 'eval \"$(devbox global shellenv --init-hook)\"' >> ~/.zshrc",
        "tail -n 1 ~/.zshrc"
      ],
      "install-starship-prompt": [
        "if [ ! -f $HOME/.config/starship.toml ]",
        "then",
        "curl -fsSL https://devbox.getfleek.dev/config/starship/starship.toml > $HOME/.config/starship.toml",
        "fi"
      ],
      "run-justfile": [
        "cd scripts",
        "just --list",
        "echo \"Run 'devbox run run-justfile -- <target>' to execute a specific target\""
      ],
      "run-tests": [
        "nu scripts/test-complete-integration.nu"
      ],
      "init-env": [
        "nu init.nu --verbose"
      ],
      "init-env-dry-run": [
        "nu init.nu --dry-run"
      ],
      "validate-env": [
        "nu init.nu --validate-only"
      ],
      "build-cli": [
        "cd cli && cargo build --release"
      ],
      "test-cli": [
        "cd cli && cargo test"
      ],
      "test-cli-with-db": [
        "cd cli && cargo test --features database"
      ],
      "install-cli": [
        "cd cli && cargo install --path ."
      ],
      "run-cluster-cli": [
        "cd cli && cargo run --"
      ],
      "lint-cli": [
        "cd cli && cargo clippy -- -D warnings"
      ],
      "format-cli": [
        "cd cli && cargo fmt"
      ],
      "clean-cli": [
        "cd cli && cargo clean"
      ],
      "build-cluster-operator": [
        "cd cluster && cargo build --release"
      ],
      "test-cluster-operator": [
        "cd cluster && cargo test"
      ],
      "deploy-cluster-operator": [
        "kubectl apply -f cluster/install-operator-crd.yaml",
        "kubectl apply -f cluster/rbac.yaml",
        "kubectl apply -f cluster/deployment.yaml"
      ],
      "run-cluster-manager": [
        "cd cluster-manager && npm start"
      ],
      "build-cluster-manager": [
        "cd cluster-manager && npm run build"
      ],
      "test-cluster-manager": [
        "cd cluster-manager && npm test"
      ],
      "run-command-tracer": [
        "cd scripts/command-tracer && npm start"
      ],
      "build-command-tracer": [
        "cd scripts/command-tracer && npm run build"
      ],
      "test-command-tracer": [
        "cd scripts/command-tracer && npm test"
      ],
      "start-database": [
        "cd database && docker-compose up -d"
      ],
      "stop-database": [
        "cd database && docker-compose down"
      ],
      "migrate-database": [
        "cd database/migrations && ./migrate.sh"
      ],
      "run-kcl-config": [
        "kcl run kcl/main.k"
      ],
      "test-kcl-config": [
        "kcl test kcl/test.k"
      ],
      "generate-kcl-yaml": [
        "kcl run kcl/main.k > kcl/yaml/generated.yaml"
      ],
      "deploy-crossplane": [
        "kubectl apply -f crossplane/configuration.yaml",
        "kubectl apply -f crossplane/xrds/cluster-xrd.yaml",
        "kubectl apply -f crossplane/compositions/cluster-composition.yaml"
      ],
      "check-cluster-local": [
        "kubectl apply -f clusters/local/cluster.yaml"
      ],
      "check-cluster-staging": [
        "kubectl apply -f clusters/staging/cluster.yaml"
      ],
      "check-cluster-production": [
        "kubectl apply -f clusters/production/cluster.yaml"
      ]
    }
  }
}
